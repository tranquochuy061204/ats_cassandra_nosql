import fs from 'fs';
import path from 'path';
import { getCVText } from './pdfParser.js';
import dotenv from 'dotenv';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

console.log(
  'üîë GEMINI_API_KEY:',
  process.env.GEMINI_API_KEY ? `ƒê√£ c·∫•u h√¨nh (${process.env.GEMINI_API_KEY.slice(0, 15)}...)` : '‚ùå Ch∆∞a c·∫•u h√¨nh'
);

// ‚öôÔ∏è Kh·ªüi t·∫°o Gemini client
const geminiApiKey = process.env.GEMINI_API_KEY;
const genAI = geminiApiKey ? new GoogleGenerativeAI(geminiApiKey) : null;

/**
 * Ph√¢n t√≠ch CV v√† Job ‚Üí ch·∫•m ƒëi·ªÉm ƒë·ªô ph√π h·ª£p (0‚Äì100)
 * @param {object} opts
 * @param {string} opts.cvUrl - ƒê∆∞·ªùng d·∫´n file CV
 * @param {string} opts.jobTitle - Ti√™u ƒë·ªÅ c√¥ng vi·ªác
 * @param {string} opts.jobRequirements - M√¥ t·∫£ y√™u c·∫ßu c√¥ng vi·ªác
 * @param {string[]} [opts.jobSkills] - Danh s√°ch k·ªπ nƒÉng
 * @returns {Promise<{score:number, analysis:{strengths:string[], weaknesses:string[]}}>}
 */
export async function callAiMatchCV({ cvUrl, jobTitle, jobRequirements, jobSkills = [] }) {
  try {
    // ‚úÖ Check Gemini client
    if (!genAI) {
      console.error('‚ùå GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!');
      return {
        score: 0,
        analysis: {
          strengths: [],
          weaknesses: ['Ch∆∞a c·∫•u h√¨nh GEMINI_API_KEY trong .env'],
        },
      };
    }

    // 1Ô∏è‚É£ ƒê·ªçc n·ªôi dung CV v√† extract text
    const cvResult = await getCVText(cvUrl);

    // Extract text t·ª´ TextResult object
    const cvText = typeof cvResult === 'string' ? cvResult : cvResult?.text || '';

    console.log('‚ÑπÔ∏è ƒê√£ tr√≠ch xu·∫•t CV text:', cvText);

    if (!cvText || cvText.length < 100) {
      console.warn('‚ö†Ô∏è CV text qu√° ng·∫Øn ho·∫∑c tr·ªëng:', cvUrl);
      return {
        score: 0,
        analysis: {
          strengths: [],
          weaknesses: ['CV kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c ho·∫∑c n·ªôi dung qu√° ng·∫Øn'],
        },
      };
    }

    // 2Ô∏è‚É£ L√†m s·∫°ch CV text (lo·∫°i b·ªè k√Ω t·ª± th·ª´a)
    const cleanedCV = cvText
      .replace(/--\s*\d+\s*of\s*\d+\s*--/g, '') // X√≥a "-- 1 of 2 --"
      .replace(/¬©\s*topcv\.vn/g, '') // X√≥a watermark
      .replace(/\n{3,}/g, '\n\n') // Gi·∫£m xu·ªëng d√≤ng th·ª´a
      .trim();

    // 3Ô∏è‚É£ T·∫°o prompt cho Gemini
    const prompt = `
B·∫°n l√† chuy√™n gia tuy·ªÉn d·ª•ng chuy√™n nghi·ªáp.
ƒê·ªçc k·ªπ m√¥ t·∫£ c√¥ng vi·ªác v√† CV d∆∞·ªõi ƒë√¢y, sau ƒë√≥ ƒë√°nh gi√° ƒë·ªô ph√π h·ª£p t·ª´ 0-100 ƒëi·ªÉm.

QUAN TR·ªåNG: Tr·∫£ v·ªÅ JSON ƒë√∫ng format sau (kh√¥ng th√™m b·∫•t k·ª≥ text n√†o kh√°c):
{
  "score": 75,
  "analysis": {
    "strengths": ["ƒêi·ªÉm m·∫°nh 1", "ƒêi·ªÉm m·∫°nh 2"],
    "weaknesses": ["ƒêi·ªÉm y·∫øu 1", "ƒêi·ªÉm y·∫øu 2"]
  }
}

=== C√îNG VI·ªÜC ===
Ch·ª©c danh: ${jobTitle}
K·ªπ nƒÉng y√™u c·∫ßu: ${jobSkills.join(', ') || 'Kh√¥ng r√µ'}
M√¥ t·∫£:
${jobRequirements}

=== CV ·ª®NG VI√äN ===
${cvText}

H√£y ch·∫•m ƒëi·ªÉm d·ª±a tr√™n:
- Kinh nghi·ªám li√™n quan (30%)
- K·ªπ nƒÉng ph√π h·ª£p (30%)
- Tr√¨nh ƒë·ªô h·ªçc v·∫•n (10%)
- D·ª± √°n th·ª±c t·∫ø (30%)
`;

    // 3Ô∏è‚É£ G·ªçi Gemini API
    const model = genAI.getGenerativeModel({
      model: 'gemini-2.0-flash-001',
      generationConfig: {
        temperature: 0.3,
        responseMimeType: 'application/json',
      },
    });

    const result = await Promise.race([
      model.generateContent(prompt),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Gemini timeout sau 30s')), 30000)),
    ]);

    const rawText = result.response.text().trim();
    console.log('üì• Gemini raw output:', rawText.slice(0, 200) + '...');

    // 4Ô∏è‚É£ Parse JSON an to√†n
    let parsed;
    try {
      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p Gemini wrap JSON trong markdown
      let cleanJson = rawText;
      if (rawText.includes('```json')) {
        cleanJson = rawText.match(/```json\s*([\s\S]*?)\s*```/)?.[1] || rawText;
      } else if (rawText.includes('```')) {
        cleanJson = rawText.match(/```\s*([\s\S]*?)\s*```/)?.[1] || rawText;
      }

      parsed = JSON.parse(cleanJson);

      // Validate v√† normalize
      if (typeof parsed.score !== 'number' || parsed.score < 0 || parsed.score > 100) {
        console.warn('‚ö†Ô∏è Score kh√¥ng h·ª£p l·ªá:', parsed.score);
        parsed.score = Math.max(0, Math.min(100, Number(parsed.score) || 0));
      }

      if (!parsed.analysis || typeof parsed.analysis !== 'object') {
        parsed.analysis = { strengths: [], weaknesses: [] };
      }

      if (!Array.isArray(parsed.analysis.strengths)) {
        parsed.analysis.strengths = [];
      }

      if (!Array.isArray(parsed.analysis.weaknesses)) {
        parsed.analysis.weaknesses = [];
      }
    } catch (parseErr) {
      console.warn('‚ö†Ô∏è JSON parse l·ªói:', parseErr.message);
      console.warn('Raw text:', rawText);

      parsed = {
        score: 0,
        analysis: {
          strengths: [],
          weaknesses: ['Kh√¥ng th·ªÉ ph√¢n t√≠ch CV - Gemini tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'],
        },
      };
    }

    console.log('‚úÖ Gemini AI Match CV - Score:', parsed.score);
    return parsed;
  } catch (err) {
    console.error('‚ùå L·ªói callAiMatchCV (Gemini):', err.message);

    // Chi ti·∫øt l·ªói ƒë·ªÉ debug
    if (err.status === 404) {
      console.error('üí° Model kh√¥ng t·ªìn t·∫°i. ƒêang d√πng: gemini-1.5-flash-latest');
    } else if (err.status === 401 || err.status === 403) {
      console.error('üí° API key kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n');
    }

    return {
      score: 0,
      analysis: {
        strengths: [],
        weaknesses: ['L·ªói h·ªá th·ªëng khi ph√¢n t√≠ch CV: ' + err.message],
      },
    };
  }
}
